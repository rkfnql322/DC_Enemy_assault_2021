author = "Ghost"; // Author
onLoadName = "Enemy Assault"; // Mission name (temporary solution; actual name set in editor will be used later in the alpha)
onLoadMission = "Awaiting Orders"; // Description
loadScreen = "pics\ghostadmin_icon.paa"; // Preview picture
overviewText = "Enemy forces occupy most of the island. Await orders from command and complete all tasks given. Good Luck.";
//overviewPicture = "pics\overview.paa";
class Header
{
  gameType = Coop;
  minPlayers = 1;
  maxPlayers = 34;
};

enableDebugConsole = 1;

ShowGPS = 1;
showSquadRadar = 0;

class Params
{
	//#define WEATHER_DEFAULT  25 
	//#include "\a3\functions_f\Params\paramWeather.hpp"

	#include "ghst_params.hpp"
	/*
	class EmtpyLinerevive1 {
		//--- paramsArray[0]
		title = ":: Revive Settings ::";
		values[]={0,0};
		texts[]={ "",""};
		default = 0;
	};
	#include "\a3\Functions_F\Params\paramRevive.hpp"
	*/

};

//new system
class CfgTaskEnhancements
{
   enable       = 1;            //0: disable new task features (default), 1: enable new task features & add new task markers and task widgets into the map
   3d           = 0;            //0: do not use new 3D markers (default), 1: replace task waypoints with new 3D markers
   3dDrawDist   = 10000;        //3d marker draw distance (default: 2000)
   share        = 1;            //0: do not count assigned players (default), 1: count how many players have the task assigned
   propagate    = 1;            //0: do not propagate (default), 1: propagate shared tasks to subordinates
};

// description.ext settings for revive
///////////////////////////////////////////////////////////////////////////////////////////
/*
RespawnDialog = 0;
*/
class CfgRespawnTemplates
{
	// Class used in respawnTemplates entry
	class Ghst_recover_gear
	{
		// Function or script executed upon death. Parameters passed into it are the same as are passed into onPlayerKilled.sqf file
		//onPlayerKilled = "ghst_fnc_savegear";
		// Function or script executed upon respawn. Parameters passed into it are the same as are passed into onPlayerRespawn.sqf file
		onPlayerRespawn = "ghst_fnc_loadgear";
	};
};

respawn = "BASE";
respawnDelay = 5;
respawnTemplates[] = {"MenuPosition","Ghst_recover_gear"};//,"menuInventory"
respawnOnStart = -1;
ReviveMode = 1;                         //0: disabled, 1: enabled, 2: controlled by player attributes
ReviveUnconsciousStateMode = 0;         //0: basic, 1: advanced, 2: realistic
ReviveRequiredTrait = 0;                //0: none, 1: medic trait is required
ReviveRequiredItems = 2;                //0: none, 1: medkit, 2: medkit or first aid kit
ReviveRequiredItemsFakConsumed = 1;     //0: first aid kit is not consumed upon revive, 1: first aid kit is consumed
ReviveDelay = 6;                        //time needed to revive someone (in secs)
ReviveMedicSpeedMultiplier = 2;         //speed multiplier for revive performed by medic
ReviveForceRespawnDelay = 5;            //time needed to perform force respawn (in secs)
ReviveBleedOutDelay = 180;              //unconscious state duration (in secs)
disabledAI = 1;
corpseManagerMode = 1; //Type of removed bodies: 0 - none, 1 - all, 2 - only respawnable, 3 - only non-respawnable 
corpseLimit = 20; //Max number of bodies which can be available at the same time. When exceeded, start deleting immediately. 
corpseRemovalMinTime = 120; //Minimal time in seconds a body stays in the scene (can't be removed sooner). 
corpseRemovalMaxTime = 240; //Maximal time in seconds after which a dead body is removed (can't stay longer) 
minPlayerDistance = 100; // meters. Default: 0
wreckManagerMode = 1; //Type of removed wrecks: 0 - none, 1 - all, 2 - only respawnable, 3 - only non-respawnable 
wreckLimit = 20; //Max number of wrecks which can be available at the same time. When exceeded, start deleting immediately. 
wreckRemovalMinTime = 120; //Minimal time in seconds a wreck stays in the scene (can't be removed sooner). 
wreckRemovalMaxTime = 240; //Maximal time in seconds after which a wreck is removed (can't stay longer)

class RscTitles
{
	#include "cau\extendedchat\RscTitles.cpp"
};

#include "functions\dlg\Spawnveh.hpp"
#include "functions\dlg\objlist.hpp"
#include "CHVD\dialog.hpp"
//zloadout
#include "zload\defines.hpp"//можно и нет она уже должна быть в сервере 
#include "zload\dialogLoadout.hpp"
#include "zload\dialogHelp.hpp"
#include "zload\dialogSave.hpp"
/*──────────────────────────────────────────────────────┐
│   Author: Connor                                      │
│   Steam:  https://steamcommunity.com/id/_connor       │
│   Github: https://github.com/ConnorAU                 │
│                                                       │
│   Please do not modify or remove this comment block   │
└──────────────────────────────────────────────────────*/
#include "cau\userinputmenus\systems\_macros.inc"
#include "cau\userinputmenus\systems\_defines.inc"
#include "cau\userinputmenus\controls.cpp"
#include "cau\userinputmenus\systems\displayColorPicker.cpp"
#include "cau\userinputmenus\systems\displayGuiMessage.cpp"
#include "cau\userinputmenus\systems\displayListbox.cpp"
#include "cau\userinputmenus\systems\displayListboxMulti.cpp"
#include "cau\userinputmenus\systems\displayProgressBar.cpp"
#include "cau\userinputmenus\systems\displaySlider.cpp"
#include "cau\userinputmenus\systems\displayText.cpp"
#include "cau\userinputmenus\systems\displayTextMulti.cpp"

class cfgFunctions {
	
	//ghst functions
	#include "functions\cfgfunctions.hpp"
	#include "CHVD\CfgFunctions.hpp"
	//zloadout
	#include "ZLoad\functions.hpp"
	#include "cau\extendedchat\CfgFunctions.cpp"
    #include "cau\userinputmenus\CfgFunctions.cpp"
};

class cfgEmoji {
	/*class unique_emoji_class {
		displayName="Emoji Display Name";
		icon="file\path\to\my\emoji.paa";
		keywords[]={"emoji_keyword"}; // will be recognized as :emoji_keyword: in chat
		shortcuts[]={">:D"}; // >:D will also be recognized as this emoji (optional)
		condition="true"; // Restrict who can use this emoji to whoever meets the condition
		};*/
	#include "cau\extendedchat\emojipack\config.cpp"
};

// Comm Menu
///////////////////////////////////////////////////////////////////////////////////////////
#include "comm_menu.h"
///////////////////////////////////////////////////////////////////////////////////////////
//Debrief
class CfgDebriefing
{  
	class End1
	{
		title = "Mission Completed";
		subtitle = "";
		description = "Good Job Ladies! You made it out alive!";
		pictureBackground = "";
		picture = "b_inf";
		pictureColor[] = {0.0,0.3,0.6,1};
	};
	class Fail
	{
		title = "Mission Failed";
		subtitle = "";
		description = "You all died";
		pictureBackground = "";
		picture = "b_inf";
		pictureColor[] = {0.0,0.3,0.6,1};
	};
};

// Enables the extended chat mod
CAU_xChat_enabled = 1; // 0 - disabled, 1 - enabled (default)

// Enables the use of emojis in chat. Automatically disabled if no emojis are found on the client
CAU_xChat_emojis = 1; // 0 - disabled, 1 - enabled (default)

// Toggle "<Name> connected" logs when a player loads into mission
CAU_xChat_connectMessages = 1; // 0 - disabled, 1 - enabled (default)

// Toggle "<Name> disconnected" logs when a player leaves the mission
CAU_xChat_disconnectMessages = 1; // 0 - disabled, 1 - enabled (default)

// Toggle "<Name1> was killed by <Name2>" and "<Name> was killed" when a player dies
CAU_xChat_deathMessages = 1; // 0 - disabled, 1 - enabled (default)

// Enables mentioning groups
CAU_xChat_mentionGroups = 1; // 0 - disabled, 1 - enabled (groups of player's side, default), 2 - enabled (all groups)

//Enables whisper command. Allows sending private chat messages to other players, groups and roles
CAU_xChat_whisperCommand = 1; // 0 - disabled, 1 - enabled (default)

// System logs printed to chat when the player loads into the mission
CAU_xChat_MOTD[]={
//  {delay before printing,message}
    {2,"Welcome To DCinisde Captalist's Enemy Assault !!"}
};



